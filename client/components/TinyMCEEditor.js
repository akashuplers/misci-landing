/* eslint-disable react-hooks/exhaustive-deps */
import { meeAPI } from "@/graphql/querys/mee";
import { BASE_PRICE } from "@/pages";
import { useMutation, useQuery } from "@apollo/client";
import { CheckCircleIcon, PaperAirplaneIcon } from "@heroicons/react/24/outline";
import { loadStripe } from "@stripe/stripe-js";
import { Editor } from "@tinymce/tinymce-react";
import axios from "axios";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import { CopyToClipboard } from "react-copy-to-clipboard";
import ReactLoading from "react-loading";
import Modal from "react-modal";
import {
  EmailIcon,
  EmailShareButton,
  FacebookIcon,
  FacebookShareButton,
  TelegramIcon,
  TelegramShareButton,
  TwitterIcon,
  TwitterShareButton,
  WhatsappIcon,
  WhatsappShareButton,
} from "react-share";
import { ToastContainer, toast } from "react-toastify";
import {
  API_BASE_PATH,
  API_ROUTES,
  LINKEDIN_CLIENT_ID,
  LI_API_ENDPOINTS,
} from "../constants/apiEndpoints";
import { rawMutationUpdateBlog, updateBlog } from "../graphql/mutations/updateBlog";
import {
  getCurrentDashboardURL,
  htmlToJson,
  jsonToHtml,
} from "../helpers/helper";
import useStore, {
  useByMeCoffeModal,
  useRegenButtonStore,
  useThreadsUIStore,
  useTwitterThreadALertModal,
  useTwitterThreadStore,
} from "../store/store";
import AuthenticationModal from "./AuthenticationModal";
import { BottomTabBar } from "./BottomTabBar";
import LoaderPlane from "./LoaderPlane";
import Threads from "./ThreadsUI";
import TrialEndedModal from "./TrialEndedModal";
const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
);

const total_twitter_quota = 6;
const remaining_twitter_quota = 2;
export const LILLE_BRANDING_TWEET = "This tweet was generated by @Lille_AI";

const TYPESOFTABS = {
  BLOG: "blog",
  LINKEDIN: "linkedin",
  TWITTER: "twitter",
};

const SAVING_STATUS = {
  SAVED: "Saved!",
  SAVING: "Saving...",
  ERROR: "Error!",
  BLANK: "",
}
const resetTimeout = (id, newID) => {
  clearTimeout(id);
  return newID;
};
export default function TinyMCEEditor({
  topic,
  isAuthenticated,
  editorText,
  loading,
  blog_id,
  blogData: dataIncoming,
  blogData,
  isPublished,
  ref,
  option,
  setOption,
  refetchBlog,
}) {
  const twitterButtonRef = useRef(null);
  const [multiplier, setMultiplier] = useState(1);
  const [contributionAmout, setContributionAmount] = useState(1);
  const [updatedText, setEditorText] = useState(editorText);
  const [saveLoad, setSaveLoad] = useState(false);
  const [saveText, setSaveText] = useState("Save!");
  const [publishLoad, setPublishLoad] = useState(false);
  const [publishText, setPublishText] = useState("Publish");
  const [publishLinkLoad, setPublishLinkLoad] = useState(false);
  const [publishTweetLoad, setPublishTweetLoad] = useState(false);
  const [publishLinkText, setPublishLinkText] = useState("Publish on Linkedin");
  const [publishTweetText, setPublishTweetText] =
    useState("Publish on Twitter");
  const [openModal, setOpenModal] = useState(false);
  const [text, setText] = useState("");
  const [isCopied, setIsCopied] = useState(false);
  const [trailModal, setTrailModal] = useState(false);
  const [imageURL, setImageURL] = useState();
  const [isalert, setAlert] = useState(false);
  const [load, setLoad] = useState(false);
  // const [editingMode, setEditingMode] = useState(false);
  var isEditing = true;
  const isSave = useStore((state) => state.isSave);
  const creditLeft = useStore((state) => state.creditLeft);
  const updateCredit = useStore((state) => state.updateCredit);
  const showContributionModal = useByMeCoffeModal((state) => state.isOpen);
  const setShowContributionModal = useByMeCoffeModal(
    (state) => state.toggleModal
  );
  const [contributinoModalLoader, setContributionModalLoader] = useState(false);
  const [isEditorTextUpdated, setIsEditorTextUpdated] = useState(false);
  const [initailEditorText, setInitailEditorText] = useState(editorText);
  const { twitterThreadData, setTwitterThreadData } = useTwitterThreadStore();
  // const {}
  const [prevTwitterThreads, setPrevTwitterThreads] =
    useState(twitterThreadData);
  const [pauseTwitterPublish, setPauseTwitterPublish] = useState(false);
  const {
    isOpen: isTwitterThreadAlertOpen,
    remaining_twitter_quota: remainingTwitterQuota,
    total_twitter_quota: totalTwitterQuota,
    isUserpaid: isUserPaidForTwitter,
    toggleModal: toggleTwitterThreadAlertModal,
    togggleShowInitailText: twitterThreadAlertToggleShowInitailText,
    setOptions: setTwitterThreadAlertOption,
  } = useTwitterThreadALertModal();
  const { showTwitterThreadUI, setShowTwitterThreadUI } = useThreadsUIStore();
  const [autoSaveSavingStatus, setAutoSaveSavingStatus] = useState(SAVING_STATUS.SAVED);
  const [prevAutoSaveData, setPrevAutoSaveData] = useState(editorText);
  const [hasDataChanged, setHasDataChanged] = useState(false);

  const [timeout, setTimeoutId] = useState(null);
  const saveValue = () => {
    // isAuthenticated && handleSave(false, false);

    var ispaid = localStorage.getItem("ispaid");
    var getToken = localStorage.getItem("token");
    var credits = localStorage.getItem("credits");
    if (ispaid === "true" || credits !== "0") {
      if (getToken) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(updatedText, "text/html");
        const img = doc?.querySelector("img");
        const src = img?.getAttribute("src");

        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = updatedText;
        const elementsToRemove = tempDiv.querySelectorAll("h3");
        for (let i = 0; i < elementsToRemove.length; i++) {
          const element = elementsToRemove[i];
          element.parentNode.removeChild(element);
        }
        const elementsToRemove2 = tempDiv.querySelectorAll("a");
        for (let i = 0; i < elementsToRemove2.length; i++) {
          const element = elementsToRemove2[i];
          element.parentNode.removeChild(element);
        }
        const textContent = tempDiv.textContent;
        const jsonDoc = htmlToJson(updatedText, imageURL).children;
        const formatedJSON = { children: [...jsonDoc] };
        var optionsForUpdate = {
          // tinymce_json: formatedJSON,
          blog_id: blog_id,
          platform: option === "blog" ? "wordpress" : option,
          imageUrl: src,
          imageSrc: imageURL ? null : imageURL,
          description: textContent,
        };
        if (showTwitterThreadUI === true) {
          optionsForUpdate.threads = twitterThreadData;
        } else {
          optionsForUpdate.tinymce_json = formatedJSON;
        }
        fetch(API_BASE_PATH + "/graphql", {
          method: 'POST',
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + getToken,
          },
          body: JSON.stringify(
            {
              variables: {
                options: optionsForUpdate,
              },
              query: rawMutationUpdateBlog
            }
          )
        })
          .then(response => response.json())
          .then(responseData => {
            console.log(responseData);
          })
          .catch(error => {
            console.error('Error:', error);
          });
        setAuthenticationModalOpen(false);
      } else {
        setAuthneticationModalType("signup");
        setAuthenticationModalOpen(true);
      }
    }
    setAutoSaveSavingStatus(SAVING_STATUS.SAVED);
  };
  useEffect(() => {
    return () => {
      clearTimeout(timeout);
    };
  }, [timeout]);
  const [thisIsToBePublished, setThisIsToBePublished] = useState(
    TYPESOFTABS.BLOG
  );
  var getToken;
  if (typeof window !== "undefined") {
    getToken = localStorage.getItem("token");
  }
  const {
    data: meeData,
    loading: meeLoading,
    error: meeError,
    refetch: meeRefetch,
  } = useQuery(meeAPI, {
    context: {
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer " + getToken,
      },
    },
    onError: ({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        for (let err of graphQLErrors) {
          switch (err.extensions.code) {
            case "UNAUTHENTICATED":
              localStorage.clear();
              window.location.href = "/";
          }
        }
      }
      if (networkError) {
        //console.log(`[Network error]: ${networkError}`);

        if (
          `${networkError}` ===
          "ServerError: Response not successful: Received status code 401" &&
          isauth
        ) {
          localStorage.clear();

          toast.error("Session Expired! Please Login Again..", {
            position: "top-center",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
          });
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        }
      }
    },
  });
  const [initialImageSrc, setInitialImageSrc] = useState(null);
  useEffect(() => {
    // Set the initial image source when the component mounts
    const imageElement = getImageSrc(editorText);
    if (imageElement) {
      setInitialImageSrc(imageElement);
    }
  }, []);
  const handleEditorImageChange = (content) => {
    const updatedImageSrc = getImageSrc(content);
    if (updatedImageSrc && initialImageSrc !== updatedImageSrc) {
      alert("Thanks for uploading!");
    }
  };
  useEffect(() => {
    if (twitterThreadData === prevTwitterThreads) {
    } else {
      setSaveText("Save Now!");
    }
  }, [twitterThreadData]);

  useEffect(() => {
    if (meeData) {
      setTwitterThreadAlertOption(
        meeData?.me?.remaining_twitter_quota,
        meeData?.me?.total_twitter_quota,
        meeData?.me?.paid
      );
    }
  }, [meeData]);
  useEffect(() => {
    // alert('COming to TINy', option, "Super")
    // toast("Coming to Tiny" + option, {})

    if (option === "linkedin") {
      const aa = blogData?.publish_data?.find(
        (pd) => pd.platform === "linkedin"
      ).tiny_mce_data;
      const htmlDoc = jsonToHtml(aa);
      //console.log("885", htmlDoc);
      setEditorText(htmlDoc);
    } else if (option === "linkedin-comeback") {
      setOption("linkedin");
      const aa = blogData?.publish_data?.find(
        (pd) => pd.platform === "linkedin"
      ).tiny_mce_data;
      const htmlDoc = jsonToHtml(aa);
      //console.log("885", htmlDoc);
      setEditorText(htmlDoc);
    } else {
      if (option === "twitter-comeback") {
        setOption("twitter");
        const aa = blogData?.publish_data?.find(
          (pd) => pd?.platform === "twitter"
        );
        const htmlDoc = jsonToHtml(aa?.tiny_mce_data);
        // check remainging
        if (
          meeData?.me?.remaining_twitter_quota <= 0 ||
          meeData?.me?.remaining_twitter_quota == null ||
          meeData?.me?.remaining_twitter_quota == undefined ||
          meeData?.me?.remaining_twitter_quota < 1
        ) {
          setPauseTwitterPublish(true);
        }

        if (
          aa?.threads === null ||
          aa?.threads === undefined ||
          aa?.threads.length === 0 ||
          aa?.threads == ""
        ) {
          setShowTwitterThreadUI(false);
        } else {
          //console.log("THREADS DATA");
          //console.log(aa?.threads);
          const twitterThreadsFromAPI = [...aa?.threads];
          const lastThread =
            twitterThreadsFromAPI[twitterThreadsFromAPI.length - 1];
          //console.log(lastThread);
          const secondlastThread =
            twitterThreadsFromAPI[twitterThreadsFromAPI.length - 2];
          var theSecondLastThread = secondlastThread;
          //console.log(secondlastThread);
          var mergedThread = "";
          if (lastThread == LILLE_BRANDING_TWEET) {
            if (
              theSecondLastThread === undefined ||
              theSecondLastThread === null ||
              theSecondLastThread === ""
            ) {
              theSecondLastThread = "";
            } else {
              theSecondLastThread = theSecondLastThread + " .";
            }
            mergedThread = secondlastThread + ". " + lastThread;
            twitterThreadsFromAPI.pop();
            twitterThreadsFromAPI.pop();
            twitterThreadsFromAPI.push(mergedThread);
            setTwitterThreadData(twitterThreadsFromAPI);
            setInitialTwitterThreads(twitterThreadsFromAPI);
          } else {
            setTwitterThreadData(twitterThreadsFromAPI);
            setInitialTwitterThreads(twitterThreadsFromAPI);
          }
          setShowTwitterThreadUI(true);
        }
        setEditorText(htmlDoc);
        if (
          meeData?.me?.remaining_twitter_quota <= 0 ||
          meeData?.me?.remaining_twitter_quota == null ||
          meeData?.me?.remaining_twitter_quota == undefined ||
          meeData?.me?.remaining_twitter_quota < 1
        ) {
          setPauseTwitterPublish(true);
        }
      }
    }

    const savingRedirectFrom = localStorage.getItem("savingRedirectFrom");
    if (savingRedirectFrom === "linkedin") {
      setShowTwitterThreadUI(false);
      setOption("linkedin");
      const aa = blogData?.publish_data?.find(
        (pd) => pd.platform === "linkedin"
      ).tiny_mce_data;
      const htmlDoc = jsonToHtml(aa);
      setEditorText(htmlDoc);
      localStorage.removeItem("savingRedirectFrom");
    } else if (savingRedirectFrom === "twitter") {
      setShowTwitterThreadUI(true);
      setOption("twitter");
      handleTwitterBlog();
      localStorage.removeItem("savingRedirectFrom");
    } else if (savingRedirectFrom === "blog") {
      setOption("blog");
      handleBlog();
      localStorage.removeItem("savingRedirectFrom");
    }
  }, [option]);

  const onCopyText = () => {
    setIsCopied(true);
    setTimeout(() => {
      setIsCopied(false);
    }, 1000);
  };
  const [initailTwitterThreads, setInitialTwitterThreads] = useState([]);
  useEffect(() => {
    if (
      option !== "linkedin-comeback" &&
      option !== "twitter-comeback" &&
      option !== "twitter" &&
      option !== "linkedin"
    )
      setEditorText(editorText);
  }, [editorText]);

  useEffect(() => {
    if (isSave) handleSave();
  }, [isSave]);

  const [authenticationModalType, setAuthneticationModalType] = useState("");
  const [authenticationModalOpen, setAuthenticationModalOpen] = useState(false);
  const router = useRouter();
  let token,
    linkedInAccessToken,
    authorId,
    twitterAccessToken,
    twitterAccessTokenSecret;
  if (typeof window !== "undefined") {
    token = localStorage.getItem("token");
    linkedInAccessToken = localStorage.getItem("linkedInAccessToken");
    twitterAccessToken = localStorage.getItem("twitterAccessToken");
    twitterAccessTokenSecret = localStorage.getItem("twitterAccessTokenSecret");
    authorId = localStorage.getItem("authorId");
  }
  const [
    UpdateBlog,
    { data: updateData, loading: updateLoading, error: updateError },
  ] = useMutation(updateBlog);

  const handleSave = async (redirectUser = true, showToast = true) => {
    console.log("user-save");

    var getToken, ispaid, credits;
    if (window.location.pathname !== "/dashboard/" + blog_id) {
      // check for options, blogs, twitter, linkedin,
      if (option === "twitter") {
        localStorage.setItem("savingRedirectFrom", "twitter");
      } else if (option === "linkedin") {
        localStorage.setItem("savingRedirectFrom", "linkedin");
      } else if (option === "blog") {
        localStorage.setItem("savingRedirectFrom", "blog");
      }
    }

    if (typeof window !== "undefined") {
      window.addEventListener("beforeunload", (event) => {
        event.preventDefault();
        event.returnValue = null;
      });
      ispaid = localStorage.getItem("ispaid");
      getToken = localStorage.getItem("token");
      credits = localStorage.getItem("credits");
    }
    console.log(
      "****--",
      ispaid === "true",
      credits !== "0",
      ispaid === "true" || credits !== "0"
    );
    if (ispaid === "true" || credits !== "0") {
      if (getToken) {
        setSaveLoad(true);

        const parser = new DOMParser();
        const doc = parser.parseFromString(updatedText, "text/html");
        const img = doc?.querySelector("img");
        const src = img?.getAttribute("src");

        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = updatedText;
        const elementsToRemove = tempDiv.querySelectorAll("h3");
        for (let i = 0; i < elementsToRemove.length; i++) {
          const element = elementsToRemove[i];
          element.parentNode.removeChild(element);
        }
        const elementsToRemove2 = tempDiv.querySelectorAll("a");
        for (let i = 0; i < elementsToRemove2.length; i++) {
          const element = elementsToRemove2[i];
          element.parentNode.removeChild(element);
        }
        const textContent = tempDiv.textContent;

        const jsonDoc = htmlToJson(updatedText, imageURL).children;
        const formatedJSON = { children: [...jsonDoc] };
        var optionsForUpdate = {
          // tinymce_json: formatedJSON,
          blog_id: blog_id,
          platform: option === "blog" ? "wordpress" : option,
          imageUrl: src,
          imageSrc: imageURL ? null : imageURL,
          description: textContent,
        };
        if (showTwitterThreadUI === true) {
          optionsForUpdate.threads = twitterThreadData;
        } else {
          optionsForUpdate.tinymce_json = formatedJSON;
        }
        UpdateBlog({
          variables: {
            options: optionsForUpdate,
          },
          context: {
            headers: {
              "Content-Type": "application/json",
              Authorization: "Bearer " + getToken,
            },
          },
        })
          .then(() => {
            //console.log(">>", window.location);
            runMeeRefetch();
            showToast == true && toast.success("Saved!!", {
              position: "top-center",
              autoClose: 5000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "light",
            });
            if (redirectUser == true) {
              if (window.location.pathname !== "/dashboard/" + blog_id) {
                window.location.href = "/dashboard/" + blog_id;
              }
            }
          })
          .catch((err) => {
            console.log(err);
          })
          .finally(() => {
            setSaveLoad(false);
            setSaveText("Saved!");
            // timemout
            setTwitterThreadData(twitterThreadData);
          });
        setAuthenticationModalOpen(false);
      } else {
        setAuthneticationModalType("signup");
        setAuthenticationModalOpen(true);
      }
    } else {
      if (!getToken) {
        setAuthneticationModalType("signup");
        setAuthenticationModalOpen(true);
      } else {
        toast.error("Looks like you don't have credit left..", {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });

        setTimeout(() => {
          window.location.href = "/";
        }, 3000);
      }
    }
  };

  const handleSaveTwitter = async (redirectUser = true) => {
    var getToken, ispaid, credits;

    if (typeof window !== "undefined") {
      window.addEventListener("beforeunload", (event) => {
        event.preventDefault();
        event.returnValue = null;
      });
      ispaid = localStorage.getItem("ispaid");
      getToken = localStorage.getItem("token");
      credits = localStorage.getItem("credits");
    }
    console.log(
      "****--",
      ispaid === "true",
      credits !== "0",
      ispaid === "true" || credits !== "0"
    );
    if (ispaid === "true" || credits !== "0") {
      if (getToken) {
        setSaveLoad(true);

        var optionsForUpdate = {
          // tinymce_json: formatedJSON,
          blog_id: blog_id,
          platform: option === "blog" ? "wordpress" : option,
          imageUrl: null,
          imageSrc: imageURL ? null : imageURL,
          description: null,
        };
        setPrevTwitterThreads(twitterThreadData);
        if (showTwitterThreadUI === true) {
          optionsForUpdate.threads = twitterThreadData;
        } else {
          optionsForUpdate.tinymce_json = formatedJSON;
        }
        UpdateBlog({
          variables: {
            options: optionsForUpdate,
          },
          context: {
            headers: {
              "Content-Type": "application/json",
              Authorization: "Bearer " + getToken,
            },
          },
        })
          .then(() => {
            toast.success("Saved!!", {
              position: "top-center",
              autoClose: 5000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "light",
            });
            setPrevTwitterThreads(twitterThreadData);
            if (redirectUser == true) {
              if (window.location.pathname !== "/dashboard/" + blog_id) {
                window.location.href = "/dashboard/" + blog_id;
              }
            }
          })
          .catch((err) => {
            console.log(err);
          })
          .finally(() => {
            setSaveLoad(false);
            setSaveText("Saved!");
            setTwitterThreadData(twitterThreadData);
          });
        setAuthenticationModalOpen(false);
      } else {
        setAuthneticationModalType("signup");
        setAuthenticationModalOpen(true);
      }
    } else {
      if (!getToken) {
        setAuthneticationModalType("signup");
        setAuthenticationModalOpen(true);
      } else {
        toast.error("Looks like you don't have credit left..", {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });

        setTimeout(() => {
          window.location.href = "/";
        }, 3000);
      }
    }
    runMeeRefetch();
  };

  const [callBack, setCallBack] = useState();
  const [askingForSavingBlog, setAskingForSavingBlog] = useState(false);
  const [
    askingForSavingBlogWhileConnecting,
    setAskingForSavingBlogWhileConnecting,
  ] = useState(false);
  useEffect(() => {
    if (load) {
      const inputElement = document.getElementsByClassName("tox-textfield");
      inputElement[0].value = "Loading...";
    }
  }, [load]);

  const handleJustConnect = async () => {
    if (thisIsToBePublished === TYPESOFTABS.TWITTER) {
      await handleconnectTwitter();
    } else if (thisIsToBePublished === TYPESOFTABS.LINKEDIN) {
      await handleconnectLinkedin();
    }

    setAskingForSavingBlogWhileConnecting(false);
    setIsEditorTextUpdated(false);
    setIRanNumberOfTimes(1);
  };
  const handleSaveLogAndConnect = async () => {
    await handleSave(false);
    setTwitterThreadData(twitterThreadData);
    if (thisIsToBePublished === TYPESOFTABS.TWITTER) {
      await handleconnectTwitter();
    } else if (thisIsToBePublished === TYPESOFTABS.LINKEDIN) {
      await handleconnectLinkedin();
    }
    setAskingForSavingBlogWhileConnecting(false);
    setIsEditorTextUpdated(false);
    setIRanNumberOfTimes(1);
  };

  useEffect(() => {
    if (typeof window !== "undefined") {
      setText(window.location.origin + "/public/");
    }
    if (typeof window !== "undefined") {
      let temp = `${window.location.origin}${router.pathname}`;
      if (temp.substring(temp.length - 1) == "/")
        setCallBack(temp.substring(0, temp.length - 1));
      else {
        setCallBack(window.location.origin + "/dashboard");
      }
    }
  }, []);
  const handleconnectLinkedin = () => {
    localStorage.setItem("loginProcess", true);
    localStorage.setItem("bid", blog_id);
    localStorage.removeItem("for_TW");
    const redirectUrl = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${LINKEDIN_CLIENT_ID}&redirect_uri=${callBack}&scope=r_liteprofile%20r_emailaddress%20w_member_social`;
    window.location = redirectUrl;
  };

  const handleconnectTwitter = async () => {
    console.log("handling twitter connect");
    localStorage.setItem("loginProcess", true);
    localStorage.setItem("bid", blog_id);
    localStorage.setItem("for_TW", true);

    try {
      let data = JSON.stringify({
        callback: window.location.origin + "/dashboard",
      });

      let config = {
        method: "post",
        maxBodyLength: Infinity,
        url: API_BASE_PATH + "/auth/twitter/request-token",
        headers: {
          Authorization: "",
          "Content-Type": "application/json",
        },
        data: data,
      };

      axios
        .request(config)
        .then((response) => {
          if (!response?.data?.error) {
            const twitterToken = response?.data?.data;
            const responseArray = twitterToken.split("&");
            window.location.href = `https://api.twitter.com/oauth/authorize?${responseArray[0]}`;
          } else {
            //console.log("Error", response.data.error, response?.data?.data);
          }
        })
        .catch((error) => {
          //console.log(error);
        });
    } catch (err) {
      //console.log(err);
    }
  };

  const handleSaveAndPublishBlog = async () => {
    await handleSave(false);
    // check for case of thisIsToBePublished twitter, linkedin. blog accoring run it
    if (thisIsToBePublished === TYPESOFTABS.TWITTER) {
      await handleTwitterPublish();
    } else if (thisIsToBePublished === TYPESOFTABS.LINKEDIN) {
      await handlePublish();
    } else {
      await handleSavePublish();
    }

    setAskingForSavingBlog(false);
    setIsEditorTextUpdated(false);
    setIRanNumberOfTimes(1);
  };

  const handleJustPublish = async () => {
    if (thisIsToBePublished === TYPESOFTABS.TWITTER) {
      await handleTwitterPublish();
    } else if (thisIsToBePublished === TYPESOFTABS.LINKEDIN) {
      await handlePublish();
    } else {
      await handleSavePublish();
    }

    setAskingForSavingBlog(false);
    setIsEditorTextUpdated(false);
    setIRanNumberOfTimes(1);
  };

  const handleConfirmUserForPublish = async (type) => {
    setThisIsToBePublished(type);
    if (type === TYPESOFTABS.TWITTER) {
      if (initailTwitterThreads == twitterThreadData) {
        await handleTwitterPublish();
      } else {
        setAskingForSavingBlog(true);
      }
    } else if (type === TYPESOFTABS.LINKEDIN) {
      if (iRanNumberOfTimes < 3) {
        await handlePublish();
        setAskingForSavingBlog(false);
        setIsEditorTextUpdated(false);
        setIRanNumberOfTimes(1);
        return;
      } else {
        setAskingForSavingBlog(true);
      }
    } else if (type === TYPESOFTABS.BLOG) {
      if (iRanNumberOfTimes < 3) {
        await handleJustPublish();
      } else {
        setAskingForSavingBlog(true);
      }
    }
  };
  const handleConfirmUserForConnect = async (type) => {
    setTwitterThreadData(twitterThreadData);
    setThisIsToBePublished(type);
    if (type === TYPESOFTABS.TWITTER) {
      if (initailTwitterThreads == twitterThreadData) {
        await handleconnectTwitter();
      } else {
        setTwitterThreadData(twitterThreadData);
        setAskingForSavingBlogWhileConnecting(true);
      }
    } else if (type === TYPESOFTABS.LINKEDIN) {
      if (iRanNumberOfTimes < 3) {
        await handleconnectLinkedin();
        setAskingForSavingBlogWhileConnecting(false);
        setIsEditorTextUpdated(false);
        setIRanNumberOfTimes(1);
        return;
      } else {
        setAskingForSavingBlogWhileConnecting(true);
      }
    }
  };

  useEffect(() => {
    if (option == "twitter" || option == "twitter-comeback") {
      setShowTwitterThreadUI(true);
    }
  }, [option]);

  const handleSavePublish = () => {
    if (creditLeft === 0) {
      setTrailModal(true);
    } else {
      let getToken;
      if (typeof window !== "undefined") {
        getToken = localStorage.getItem("token");
      }
      if (getToken) {
        setPublishLoad(true);
        const jsonDoc = htmlToJson(updatedText).children;
        const formatedJSON = { children: [...jsonDoc] };

        //   //console.log("save and publish");
        axios({
          method: "post",
          url: API_BASE_PATH + API_ROUTES.GQL_PATH,
          headers: {
            "content-type": "application/json",
            Authorization: "Bearer " + token,
          },
          data: {
            query:
              "mutation SavePreferences($options: PublisOptions) {\n  publish(options: $options)\n}",
            variables: {
              options: {
                blog_id: blog_id,
              },
            },
          },
        })
          .then(async (response) => {
            if (response?.data?.data?.publish) {
              toast.success("Published!!", {
                position: "top-center",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
                theme: "light",
              });
              setOpenModal(true);
              setPublishLoad(false);
              setPublishText("Published!!");
            }

            var ll = Number(localStorage.getItem("meDataMePublishCount"));

            //console.log('PUBLISH COUNT');
            //console.log(Number(localStorage.getItem('meDataMePublishCount')));
            setTimeout(() => {
              //   //console.log('MEE DATA');
              //   //console.log('HERE FOR SHOW CONTRIBUTION MODAL');
              // const credits = meeData?.me?.credits;
              //   //console.log('CREDITS : ' + credits);
              var userCredits = meeData?.me?.totalCredits - creditLeft - 1;
              //console.log('USER CREDITS: ' + userCredits);
              userCredits = userCredits + 2;
              var userPublishCount = Number(meeData?.me?.publishCount);
              //console.log('pubb', userPublishCount)
              //console.log('USER PUBLISH COUNT: ' + userPublishCount);
              const SHOW_CONTRIBUTION_MODAL =
                (localStorage.getItem("payment") === undefined ||
                  localStorage.getItem("payment") === null) &&
                (localStorage.getItem("ispaid") === null ||
                  localStorage.getItem("ispaid") === undefined ||
                  localStorage.getItem("ispaid") === "false") &&
                (userCredits === 20 ||
                  userCredits === 10 ||
                  userPublishCount === 0) &&
                !meeData?.me?.isSubscribed;
              //console.log('SHOW_CONTRIBUTION_MODAL: ', SHOW_CONTRIBUTION_MODAL);
              if (SHOW_CONTRIBUTION_MODAL) {
                setShowContributionModal(true);
              }
            }, 3000);
          })
          .catch((error) => console.log("error", error))
          .finally(() => {
            setAskingForSavingBlog(false);
          });
      }
    }
  };

  async function handleCheckout() {
    //console.log('LOCAL STOAGE: ')
    //console.log(localStorage);
    setContributionModalLoader(true);
    const stripe = await stripePromise;
    const res = await fetch(API_BASE_PATH + "/stripe/api/payment", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        customer_email: meeData?.me?.email,
        line_items: [
          {
            price_data: {
              currency: "usd",
              product_data: {
                name: "coffeeContribution",
              },
              unit_amount: BASE_PRICE * multiplier * contributionAmout,
            },
            quantity: 1,
          },
        ],
        mode: "payment",
        success_url:
          getCurrentDashboardURL() + "/" + blog_id + "/?payment=true",
        cancel_url: getCurrentDashboardURL() + "/" + blog_id,
        billing_address_collection: "auto",
      }), // Multiply by the multiplier (e.g., 500 * 1 = $5, 500 * 2 = $10, etc.)
    });
    const session = await res.json();
    //console.log(session);
    var userContribution = {
      amount: multiplier * contributionAmout,
      checkoutSessionId: session.id,
    };
    localStorage.setItem("userContribution", JSON.stringify(userContribution));
    //console.log('LOCAL STOAGE: ')
    //console.log(localStorage);
    const result = await stripe.redirectToCheckout({
      sessionId: session.id,
    });
  }

  const handlePublish = () => {
    setTwitterThreadData(twitterThreadData);
    if (creditLeft === 0) {
      setTrailModal(true);
    } else {
      const tempDiv = document.createElement("div");
      //console.log(tempDiv);
      tempDiv.innerHTML = updatedText;

      let textContent = tempDiv.textContent;
      textContent = textContent.replace(
        /[\(*\)\[\]\{\}<>@|~_]/gm,
        (x) => "\\" + x
      );
      const parser = new DOMParser();
      const doc = parser.parseFromString(updatedText, "text/html");
      const img = doc.querySelector("img");
      const src = img ? img.getAttribute("src") : null;

      setPublishLinkLoad(true);
      const data = {
        token: linkedInAccessToken,
        author: `urn:li:person:${authorId}`,
        data: textContent,
        image: src,
        blogId: blog_id,
      };
      try {
        axios
          .post(API_BASE_PATH + LI_API_ENDPOINTS.LI_POST, data, {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          })
          .then((response) => {
            //console.log(response.data);
            setTwitterThreadData(twitterThreadData);
            setPublishLinkLoad(false);
            runMeeRefetch();
            setPublishLinkText("Published on Linkedin");
            toast.success("Published on Linkedin", {
              position: "top-center",
              autoClose: 5000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "light",
            });
          })
          .catch((error) => {
            if (error.response) {
              setPublishLinkLoad(false);
              setPublishLinkText("Publish on Linkedin");
              toast.error(error.response.data.message, {
                position: "top-center",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
                theme: "light",
              });
              //console.log(error.response.data);
              //console.log(error.response.status);
            } else if (error.request) {
              //console.log(error.request);
            } else {
              //console.log("Error", error.message);
            }
          });
      } catch (error) {
        //console.log("error", error.response.data.message);
      }
    }
  };

  const handleTwitterAlertModal = (
    remaningQuota,
    totalTwitterQuota,
    isUserPaid
  ) => {
    setTwitterThreadAlertOption(remaningQuota, totalTwitterQuota, isUserPaid);
  };

  const [iRanNumberOfTimes, setIRanNumberOfTimes] = useState(0);
  function handleTwitterPublish() {
    //console.log("handleTwitterPublish");
    setTwitterThreadData(twitterThreadData);
    if (creditLeft === 0) {
      setTrailModal(true);
    } else {
      const tempDiv = document.createElement("div");
      //console.log(tempDiv);
      tempDiv.innerHTML = updatedText;
      var data = {
        token: twitterAccessToken,
        secret: twitterAccessTokenSecret,
        blogId: blog_id,
      };

      // let textContent = tempDiv.textContent;
      var textContent;
      if (showTwitterThreadUI === true) {
        textContent = twitterThreadData;
        data.texts = textContent;
      } else {
        textContent = tempDiv.textContent;
        data.text = textContent;
      }

      setPublishTweetLoad(true);
      // meeRefetch();
      // setTwitterThreadAlertOption(meeData?.me?.remaining_twitter_quota, meeData?.me?.total_twitter_quota, meeData?.me?.paid);
      //console.log("twitter quota");

      //console.log(meeData?.me?.remaining_twitter_quota, meeData?.me?.total_twitter_quota, meeData?.me?.paid);
      if (twitterThreadData.length > meeData?.me?.remaining_twitter_quota) {
        const twitterErrorMessageForUnPaid = `Lille allows ${meeData?.me?.total_twitter_quota} tweets per day. Please upgrade your account to be able to publish more.`;
        const twitterErrorMessageForPaid = `Lille allows ${meeData?.me?.total_twitter_quota} tweets per day. You have exhaust...`;

        toast.error(
          meeData?.me?.paid
            ? twitterErrorMessageForPaid
            : twitterErrorMessageForUnPaid,
          {
            position: "top-center",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "light",
          }
        );
        setPublishTweetLoad(false);
        return;
      }

      if (textContent.length < 280) {
        try {
          axios
            .post(API_BASE_PATH + LI_API_ENDPOINTS.TW_POST, data, {
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
            })
            .then((response) => {
              //console.log(response.data);
              runMeeRefetch();
              updateCredit();
              setPublishTweetLoad(false);
              setTwitterThreadData(twitterThreadData);
              setPublishTweetText("Published on Twitter");
              toast.success("Published on Twitter", {
                position: "top-center",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
                theme: "light",
              });
              setPrevTwitterThreads(twitterThreadData);
              if (window.location.pathname !== "/dashboard/" + blog_id) {
                window.location.href = "/dashboard/" + blog_id;
              }
            })
            .catch((error) => {
              if (error.response) {
                setPublishTweetLoad(false);
                setPublishTweetText("Publish on Twitter");
                toast.error(error.response.data.message, {
                  position: "top-center",
                  autoClose: 5000,
                  hideProgressBar: false,
                  closeOnClick: true,
                  pauseOnHover: true,
                  draggable: true,
                  progress: undefined,
                  theme: "light",
                });
                //console.log(error.response.data);
                //console.log(error.response.status);
              } else if (error.request) {
                //console.log(error.request);
              } else {
                //console.log("Error", error.message);
              }
            });
        } catch (error) {
          //console.log("error", error.response.data.message);
        }
      } else {
        setPublishTweetLoad(false);
        setPublishTweetText("Publish on Twitter");
        toast.error("Only 280 Character allowed!");
      }
    }
  }

  function handleBlog(e) {
    setOption("blog");
    // const siblingButton = document.querySelectorAll(".blog-toggle-button");
    // siblingButton.forEach((el) => el.classList.remove("active"));
    // const button = e.target;
    // button.classList.add("active");
    const newArray = blogData?.publish_data?.filter(
      (obj) => obj.platform === "wordpress"
    );
    var aa;
    const arr = newArray?.find((pd) => pd.published === false);
    if (arr) {
      aa = arr.tiny_mce_data;
    } else {
      if (!newArray) return;
      aa = newArray[newArray?.length - 1].tiny_mce_data;
    }
    const htmlDoc = jsonToHtml(aa);
    setShowTwitterThreadUI(false);
    // check
    setEditorText(htmlDoc);
  }

  function handleLinkedinBlog(e) {
    setOption("linkedin");
    // const siblingButton = document.querySelectorAll(".blog-toggle-button");
    // siblingButton.forEach((el) => el.classList.remove("active"));
    // const button = e.target;
    // button.classList.add("active");
    const aa = blogData?.publish_data?.find(
      (pd) => pd.platform === "linkedin"
    ).tiny_mce_data;
    const htmlDoc = jsonToHtml(aa);
    setShowTwitterThreadUI(false);
    setEditorText(htmlDoc);
  }
  const { stateOfRegenButton, setStateOfRegenButton } = useRegenButtonStore();
  function handleTwitterBlog(e) {
    setOption("twitter");
    setStateOfRegenButton(false);
    // const siblingButton = document.querySelectorAll(".blog-toggle-button");
    // siblingButton.forEach((el) => el.classList.remove("active"));
    // const button = e.target;
    // button.classList.add("active");
    const aa = blogData?.publish_data?.find((pd) => pd.platform === "twitter");
    const htmlDoc = jsonToHtml(aa?.tiny_mce_data);
    //console.log('MOVEING TO ');
    if (
      aa?.threads === null ||
      aa?.threads === undefined ||
      aa?.threads.length === 0 ||
      aa?.threads == ""
    ) {
      if (
        meeData?.me?.remaining_twitter_quota == 0 ||
        meeData?.me?.remaining_twitter_quota == null ||
        meeData?.me?.remaining_twitter_quota == undefined
      ) {
        setShowTwitterThreadUI(true);
      } else {
        setShowTwitterThreadUI(false);
      }
    } else {
      //console.log("THREADS DATA");
      //console.log(aa?.threads);
      const twitterThreadsFromAPI = [...aa?.threads];
      const lastThread =
        twitterThreadsFromAPI[twitterThreadsFromAPI.length - 1];
      //console.log(lastThread);
      const secondlastThread =
        twitterThreadsFromAPI[twitterThreadsFromAPI.length - 2];
      var theSecondLastThread = secondlastThread;
      //console.log(secondlastThread);
      var mergedThread = "";
      if (lastThread == LILLE_BRANDING_TWEET) {
        if (
          theSecondLastThread === undefined ||
          theSecondLastThread === null ||
          theSecondLastThread === ""
        ) {
          theSecondLastThread = "";
        } else {
          theSecondLastThread = theSecondLastThread + " .";
        }
        mergedThread = secondlastThread + ". " + lastThread;
        twitterThreadsFromAPI.pop();
        twitterThreadsFromAPI.pop();
        twitterThreadsFromAPI.push(mergedThread);
        setTwitterThreadData(twitterThreadsFromAPI);
        setInitialTwitterThreads(twitterThreadsFromAPI);
      } else {
        setTwitterThreadData(twitterThreadsFromAPI);
        setInitialTwitterThreads(twitterThreadsFromAPI);
      }
      setShowTwitterThreadUI(true);
    }
    setEditorText(htmlDoc);
  }
  useEffect(() => {
    setIRanNumberOfTimes(1);
  }, [option]);

  function runMeeRefetch() {
    meeRefetch().then((res) => {
      setTwitterThreadAlertOption(
        meeData?.me?.remaining_twitter_quota,
        meeData?.me?.total_twitter_quota,
        meeData?.me?.paid
      );
      const remainingQuota = meeData?.me?.remaining_twitter_quota;
      console.log("REMAINING QUOTA: " + remainingQuota);
      console.log(meeData);
    });
  }

  // useEffect(() => {
  //   toast('this');
  //   meeRefetch().then((res) => {
  //     setTwitterThreadAlertOption(meeData?.me?.remaining_twitter_quota, meeData?.me?.total_twitter_quota, meeData?.me?.paid);
  //     const remainingQuota = meeData?.me?.remaining_twitter_quota;
  //     console.log("REMAINING QUOTA: " + remainingQuota);
  //     console.log(meeData);
  //   });
  // }, [handleSave, handlePublish, handleTwitterPublish, handleSaveTwitter, option]);

  if (loading) return <LoaderPlane />;

  return (
    <>
      <ToastContainer />
      {trailModal && (
        <TrialEndedModal setTrailModal={setTrailModal} topic={null} />
      )}
      {/* <Modal
        isOpen={editingMode}
        onRequestClose={() => {
          setEditingMode(false);
        }}
        ariaHideApp={false}
        className="w-[100%] sm:w-[38%] max-h-[95%]"
        style={{
          overlay: {
            backgroundColor: "rgba(0,0,0,0.5)",
            zIndex: "9999",
          },
          content: {
            position: "absolute",
            top: "50%",
            left: "50%",
            right: "auto",
            border: "none",
            background: "white",
            borderRadius: "8px",
            maxWidth: "420px",
            bottom: "",
            zIndex: "999",
            marginRight: "-50%",
            transform: "translate(-50%, -50%)",
            padding: "20px",
            paddingBottom: "0px",
          },
        }}
      >
        <div className="pl-4 text-xl font-bold mb-5">
          You are now in The Editor Mode!! 🥳
        </div>
      </Modal> */}

      <Modal
        isOpen={askingForSavingBlog}
        onRequestClose={() => setAskingForSavingBlog(false)}
        ariaHideApp={false}
        className="w-[100%] sm:w-[38%] max-h-[95%]"
        style={{
          overlay: {
            backgroundColor: "rgba(0,0,0,0.5)",
            zIndex: "9999",
          },
          content: {
            position: "absolute",
            top: "50%",
            left: "50%",
            right: "auto",
            border: "none",
            background: "white",
            // boxShadow: "0px 4px 20px rgba(170, 169, 184, 0.1)",
            borderRadius: "8px",
            height: "280px",
            // width: "100%",
            maxWidth: "380px",
            bottom: "",
            zIndex: "999",
            marginRight: "-50%",
            transform: "translate(-50%, -50%)",
            padding: "30px",
            paddingBottom: "0px",
          },
        }}
      >
        <button
          className="absolute right-[35px]"
          onClick={() => setAskingForSavingBlog(false)}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
        <div className="mx-auto pb-4">
          <img className="mx-auto h-12" src="/info.png" />
        </div>
        <div className="mx-auto font-bold text-2xl pl-[25%]">Are you sure</div>
        <p className="text-center text-gray-500 text-base font-medium mt-4 mx-auto">
          Do you want to save the changes
        </p>
        <div className="flex m-9">
          <button
            className="mr-4 w-[200px] p-4 bg-transparent hover:bg-red-500 text-gray-500 font-semibold hover:text-white py-2 px-4 border border-red-500 hover:border-transparent rounded"
            onClick={handleJustPublish}
          >
            No
          </button>
          <button
            className="w-[240px]  bg-transparent hover:bg-green-500 text-green-700 font-semibold hover:text-white py-2 px-4 border border-green-500 hover:border-transparent rounded"
            onClick={handleSaveAndPublishBlog}
          >
            YES, Save
          </button>
        </div>
      </Modal>
      <Modal
        isOpen={askingForSavingBlogWhileConnecting}
        onRequestClose={() => setAskingForSavingBlogWhileConnecting(false)}
        ariaHideApp={false}
        className="w-[100%] sm:w-[38%] max-h-[95%]"
        style={{
          overlay: {
            backgroundColor: "rgba(0,0,0,0.5)",
            zIndex: "9999",
          },
          content: {
            position: "absolute",
            top: "50%",
            left: "50%",
            right: "auto",
            border: "none",
            background: "white",
            // boxShadow: "0px 4px 20px rgba(170, 169, 184, 0.1)",
            borderRadius: "8px",
            height: "280px",
            // width: "100%",
            maxWidth: "380px",
            bottom: "",
            zIndex: "999",
            marginRight: "-50%",
            transform: "translate(-50%, -50%)",
            padding: "30px",
            paddingBottom: "0px",
          },
        }}
      >
        <button
          className="absolute right-[35px]"
          onClick={() => setAskingForSavingBlogWhileConnecting(false)}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
        <div className="mx-auto pb-4">
          <img className="mx-auto h-12" src="/info.png" />
        </div>
        <div className="mx-auto font-bold text-2xl pl-[25%]">Are you sure</div>
        <p className="text-center text-gray-500 text-base font-medium mt-4 mx-auto">
          Do you want to save the changes
        </p>
        <div className="flex m-9">
          <button
            className="mr-4 w-[200px] p-4 bg-transparent hover:bg-red-500 text-gray-500 font-semibold hover:text-white py-2 px-4 border border-red-500 hover:border-transparent rounded"
            onClick={handleJustConnect}
          >
            No
          </button>
          <button
            className="w-[240px]  bg-transparent hover:bg-green-500 text-green-700 font-semibold hover:text-white py-2 px-4 border border-green-500 hover:border-transparent rounded"
            onClick={handleSaveLogAndConnect}
          >
            YES, Save
          </button>
        </div>
      </Modal>
      <Modal
        isOpen={showContributionModal}
        ariaHideApp={false}
        className="w-[100%] sm:w-[38%] max-h-[95%]"
        style={{
          overlay: {
            backgroundColor: "rgba(0,0,0,0.5)",
            zIndex: "9998",
          },
          content: {
            position: "absolute",
            top: "50%",
            left: "50%",
            right: "auto",
            border: "none",
            background: "white",
            borderRadius: "8px",
            maxWidth: "450px",
            bottom: "",
            zIndex: "999",
            marginRight: "-50%",
            transform: "translate(-50%, -50%)",
            padding: "30px",
            paddingBottom: "30px",
          },
        }}
        // outside click close
        shouldCloseOnOverlayClick={true}
        onRequestClose={() => setShowContributionModal(false)}
      >
        <button
          onClick={() => {
            setShowContributionModal(false);
          }}
          className="absolute top-3 right-3"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6 18L18 6M6 6l12 12"
            ></path>
          </svg>
        </button>
        <div className="flex flex-col items-center justify-center relative">
          {/* <h3>Buy me a coffee</h3> */}
          <h3 className="text-2xl font-bold text-left ">Buy us a coffee</h3>
        </div>
        <div className="flex flex-col items-center justify-center mt-4">
          <p className="text-sm text-gray-500 text-center">
            If you like our product, please consider buying us a cup of
            coffee.😊
          </p>
        </div>
        <div
          className={`flex justify-around items-center  w-full bg-indigo-100 p-[10px] border-indigo-500 rounded-md mt-[20px]`}
        >
          <div className="flex items-center justify-center text-[40px] ">
            {multiplier < 5 ? (
              Array(multiplier)
                .fill(0)
                .map((_, i) => <>☕</>)
            ) : (
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                  justifyContent: "center",
                  textAlign: "center",
                  fontSize: "40px",
                }}
              >
                <div>☕☕</div>
                <div>☕☕☕</div>
              </div>
            )}
          </div>

          {/* circle and numebr */}

          <div className="flex items-center justify-center ">
            {[1, 2, 5].map((item) => (
              <div
                key={item}
                className={`flex items-center justify-center w-[40px] h-[40px] rounded-full bg-indigo-500 text-white text-sm font-bold 
                ml-[10px] hover:bg-indigo-700 cursor-pointer ${multiplier === item && "bg-indigo-700 "
                  }  
                `}
                onClick={() => setMultiplier(item)}
              >
                {item}
              </div>
            ))}
          </div>
        </div>
        {/* button */}
        <button
          className="bg-indigo-500 text-white w-full py-2 mt-[20px] rounded-md hover:bg-indigo-700 active:border-2 active:border-indigo-700 active:shadow-md"
          onClick={handleCheckout}
        >
          <style>
            {`
            .loader {
            border: 3px solid #ffffff; /* Light grey */ 
            border-top: 3px solid rgb(99,  102,  241); /* Blue border on top */
            border-radius: 50%; /* Rounded shape */
            width: 30px; /* Width of the loader */
            height: 30px; /* Height of the loader */
            animation: spin 2s linear infinite; /* Animation to rotate the loader */
        }

            @keyframes spin {
              0 % { transform: rotate(0deg); } /* Starting position of the rotation */
              100% {transform: rotate(360deg); } /* Ending position of the rotation */
            }
          `}
          </style>
          {contributinoModalLoader ? (
            <div className="flex items-center justify-center">
              <div className="loader"></div> {/* Add the loader class here */}
            </div>
          ) : (
            <>
              Contribute us with <strong>${multiplier}</strong> Coffee
              {multiplier > 1 && "s"}{" "}
            </>
          )}
        </button>
      </Modal>
      {isalert && (
        <div className="p-2 text-xs">
          Lille is not responsible for any images uploaded by you that contain
          copyright infringement.
          <button
            onClick={() => {
              setAlert(false);
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="w-5 h-6 ml-2"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </button>
        </div>
      )}
      <Modal
        isOpen={openModal}
        onRequestClose={() => setOpenModal(false)}
        ariaHideApp={false}
        className="w-[100%] sm:w-[38%] max-h-[95%]"
        style={{
          overlay: {
            backgroundColor: "rgba(0,0,0,0.5)",
            zIndex: "9996",
          },
          content: {
            position: "absolute",
            top: "50%",
            left: "50%",
            right: "auto",
            border: "none",
            background: "white",
            boxShadow: "0px 4px 20px rgba(170, 169, 184, 0.1)",
            borderRadius: "8px",
            // height: "75%",
            width: "80%",
            maxWidth: "580px",
            bottom: "",
            zIndex: "999",
            marginRight: "-50%",
            transform: "translate(-50%, -50%)",
            padding: "20px",
            paddingBottom: "0px",
          },
        }}
      >
        <div className="pl-4 text-xl font-bold">Share</div>
        <WhatsappShareButton
          url={text + blog_id}
          quote={""}
          hashtag={"#Lille"}
          description={"Lille"}
          className="Demo__some-network__share-button m-5"
        >
          <WhatsappIcon size={62} round /> Whatsapp
        </WhatsappShareButton>
        <FacebookShareButton
          url={text + blog_id}
          quote={""}
          hashtag={"#Lille"}
          description={"Lille"}
          className="Demo__some-network__share-button m-5"
        >
          <FacebookIcon size={62} round /> Facebook
        </FacebookShareButton>
        <TwitterShareButton
          url={text + blog_id}
          hashtags={["lille", "nowg"]}
          className="m-5"
        >
          <TwitterIcon size={62} round />
          Twitter
        </TwitterShareButton>
        <EmailShareButton
          url={text + blog_id}
          subject="Link for my Blog"
          className="Demo__some-network__share-button m-5"
        >
          <EmailIcon size={62} round /> Email
        </EmailShareButton>
        <TelegramShareButton
          url={text + blog_id}
          quote={""}
          hashtag={"#Lille"}
          description={"Lille"}
          className="Demo__some-network__share-button m-5"
        >
          <TelegramIcon size={62} round /> Telegram
        </TelegramShareButton>
        <div className="p-5 pl-2 flex">
          <input
            type="text"
            value={text + blog_id}
            className="w-[70%] h-[40px] mr-5"
          />
          <CopyToClipboard text={text + blog_id} onCopy={onCopyText}>
            <div className="copy-area">
              <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full">
                Copy
              </button>
              <span className={`copy-feedback ${isCopied ? "active" : ""}`}>
                Copied!
              </span>
            </div>
          </CopyToClipboard>
        </div>
      </Modal>
      <AuthenticationModal
        type={authenticationModalType}
        setType={setAuthneticationModalType}
        modalIsOpen={authenticationModalOpen}
        setModalIsOpen={setAuthenticationModalOpen}
        handleSave={handleSave}
        bid={blog_id}
      />
      <div className="block">
        <div
          style={{
            paddingBottom: "0.5em",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
          className="text-sm mx-2 flex flex-wrap relative"
        >
          {isAuthenticated ? (
            <div
              className="sticky top-0"
              style={{
                display: "flex",
                gap: "0.25em",
              }}
            >
              <div
                className={`blog-toggle-button cta wordpress flex gap-1 items-center ${option == "blog" ? "active" : ""
                  }`}
                onClick={handleBlog}
              >
                <svg
                  style={{ pointerEvents: "none" }}
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 50 50"
                  width="19px"
                  height="19px"
                >
                  <path d="M 30.398438 2 L 7 2 L 7 48 L 43 48 L 43 14.601563 Z M 15 28 L 31 28 L 31 30 L 15 30 Z M 35 36 L 15 36 L 15 34 L 35 34 Z M 35 24 L 15 24 L 15 22 L 35 22 Z M 30 15 L 30 4.398438 L 40.601563 15 Z" />
                </svg>
                Blog
              </div>
              <div
                // className="blog-toggle-button cta linkedin flex gap-1 items-center"
                className={`blog-toggle-button cta linkedin flex gap-1 items-center ${option == "linkedin" ? "active" : ""
                  }`}
                onClick={handleLinkedinBlog}
              >
                <svg
                  style={{ pointerEvents: "none" }}
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 50 50"
                  width="20px"
                  height="20px"
                >
                  <path
                    fill="#0288D1"
                    d="M42,37c0,2.762-2.238,5-5,5H11c-2.761,0-5-2.238-5-5V11c0-2.762,2.239-5,5-5h26c2.762,0,5,2.238,5,5V37z"
                  />
                  <path
                    fill="#FFF"
                    d="M12 19H17V36H12zM14.485 17h-.028C12.965 17 12 15.888 12 14.499 12 13.08 12.995 12 14.514 12c1.521 0 2.458 1.08 2.486 2.499C17 15.887 16.035 17 14.485 17zM36 36h-5v-9.099c0-2.198-1.225-3.698-3.192-3.698-1.501 0-2.313 1.012-2.707 1.99C24.957 25.543 25 26.511 25 27v9h-5V19h5v2.616C25.721 20.5 26.85 19 29.738 19c3.578 0 6.261 2.25 6.261 7.274L36 36 36 36z"
                  />
                </svg>
                Linkedin
              </div>
              <div
                // className="blog-toggle-button cta twitter flex gap-1 items-center"
                className={`blog-toggle-button cta twitter flex gap-1 items-center ${option == "twitter" ? "active" : ""
                  }`}
                onClick={handleTwitterBlog}
              >
                <svg
                  style={{ pointerEvents: "none" }}
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 50 50"
                  width="20px"
                  height="20px"
                >
                  <path
                    fill="#03A9F4"
                    d="M42,12.429c-1.323,0.586-2.746,0.977-4.247,1.162c1.526-0.906,2.7-2.351,3.251-4.058c-1.428,0.837-3.01,1.452-4.693,1.776C34.967,9.884,33.05,9,30.926,9c-4.08,0-7.387,3.278-7.387,7.32c0,0.572,0.067,1.129,0.193,1.67c-6.138-0.308-11.582-3.226-15.224-7.654c-0.64,1.082-1,2.349-1,3.686c0,2.541,1.301,4.778,3.285,6.096c-1.211-0.037-2.351-0.374-3.349-0.914c0,0.022,0,0.055,0,0.086c0,3.551,2.547,6.508,5.923,7.181c-0.617,0.169-1.269,0.263-1.941,0.263c-0.477,0-0.942-0.054-1.392-0.135c0.94,2.902,3.667,5.023,6.898,5.086c-2.528,1.96-5.712,3.134-9.174,3.134c-0.598,0-1.183-0.034-1.761-0.104C9.268,36.786,13.152,38,17.321,38c13.585,0,21.017-11.156,21.017-20.834c0-0.317-0.01-0.633-0.025-0.945C39.763,15.197,41.013,13.905,42,12.429"
                  />
                </svg>
                Twitter
              </div>
              {
                iRanNumberOfTimes > 3 && autoSaveSavingStatus == SAVING_STATUS.SAVING ? <>
                  <ReactLoading
                    width={25}
                    height={25}
                    round={true}
                    color={"#2563EB"}
                  />
                  <span className="text-[#2563EB] ml-2">
                    Saving...
                  </span>
                </>
                  :
                  <CheckCircleIcon className="text-[#2563EB]" height={25} width={25} />
              }

            </div>
          ) : (
            <div style={{ display: "none" }}></div>
          )}
          {!isPublished ? (
            <div
              className={`flex w-full  lg:w-auto   lg:mt-auto ${isAuthenticated ? "mt-5" : "mt-[70px]"
                }`}
              style={{ gap: "0.25em", marginLeft: "auto" }}
            >
              <button
                className="cta text-red-500"
                onClick={() => {
                  if (showTwitterThreadUI == true) {
                    handleSaveTwitter();
                  } else {
                    handleSave();
                  }
                }}
              >
                {saveLoad ? (
                  <ReactLoading
                    width={25}
                    height={25}
                    round={true}
                    color={"#2563EB"}
                  />
                ) : (
                  saveText
                )}
              </button>
              {option === "linkedin" ? (
                linkedInAccessToken ? (
                  <button
                    className="cta-invert"
                    onClick={() => {
                      if (
                        publishLinkText === "Publish on Linkedin" ||
                        publishLinkText === "Published on Linkedin"
                      )
                        handleConfirmUserForPublish(TYPESOFTABS.LINKEDIN);
                    }}
                  >
                    {publishLinkLoad ? (
                      <ReactLoading
                        width={25}
                        height={25}
                        round={true}
                        color={"#2563EB"}
                      />
                    ) : (
                      publishLinkText
                    )}
                  </button>
                ) : (
                  <button
                    className="cta-invert"
                    onClick={() =>
                      handleConfirmUserForConnect(TYPESOFTABS.LINKEDIN)
                    }
                  >
                    Connect with Linkedin
                  </button>
                )
              ) : option === "twitter" ? (
                twitterAccessToken ? (
                  <>
                    <button
                      className={`cta-invert disabled:opacity-50 disabled:cursor-not-allowed`}
                      onClick={() => {
                        if (
                          publishTweetText === "Publish on Twitter" ||
                          publishTweetText === "Published on Twitter"
                        ) {
                          handleConfirmUserForPublish(TYPESOFTABS.TWITTER);
                        }
                      }}
                      disabled={
                        meeData?.me?.remaining_twitter_quota == undefined ||
                        meeData?.me?.remaining_twitter_quota < 1 ||
                        meeData?.me?.remaining_twitter_quota == null ||
                        pauseTwitterPublish
                      }
                    >
                      {publishTweetLoad ? (
                        <ReactLoading
                          width={25}
                          height={25}
                          round={true}
                          color={"#2563EB"}
                        />
                      ) : (
                        publishTweetText
                      )}
                    </button>
                  </>
                ) : (
                  <button
                    className={`cta-invert disabled:opacity-50 
                    disabled:cursor-not-allowed
                    `}
                    onClick={() =>
                      handleConfirmUserForConnect(TYPESOFTABS.TWITTER)
                    }
                  >
                    Connect Twitter
                  </button>
                )
              ) : isAuthenticated ? (
                <button
                  className="cta-invert"
                  onClick={() => {
                    if (publishText === "Publish") {
                      handleConfirmUserForPublish(TYPESOFTABS.BLOG);
                    }
                  }}
                >
                  {publishLoad ? (
                    <ReactLoading
                      width={25}
                      height={25}
                      round={true}
                      color={"#2563EB"}
                    />
                  ) : (
                    <>
                      <div className="flex">
                        <PaperAirplaneIcon className="w-5 h-5 mr-1" />
                        {publishText}
                      </div>
                    </>
                  )}
                </button>
              ) : (
                <></>
              )}
            </div>
          ) : (
            <div
              className="flex w-full lg:w-auto mt-5 lg:mt-auto"
              style={{ gap: "0.25em", marginLeft: "auto" }}
            >
              <button
                className="cta"
                // onClick={saveText === "Save Now!" && handleSave}
                onClick={() => {
                  if (showTwitterThreadUI == true) {
                    handleSaveTwitter();
                  } else {
                    handleSave();
                  }
                }}
              >
                {saveLoad ? (
                  <ReactLoading
                    width={25}
                    height={25}
                    round={true}
                    color={"#2563EB"}
                  />
                ) : (
                  "Update"
                )}
              </button>
              {option === "linkedin" ? (
                linkedInAccessToken ? (
                  <button
                    className="cta-invert"
                    onClick={() => {
                      if (
                        publishLinkText === "Publish on Linkedin" ||
                        publishLinkText === "Published on Linkedin"
                      )
                        handleConfirmUserForPublish(TYPESOFTABS.LINKEDIN);
                    }}
                  >
                    {publishLinkLoad ? (
                      <ReactLoading
                        width={25}
                        height={25}
                        round={true}
                        color={"#2563EB"}
                      />
                    ) : (
                      publishLinkText
                    )}
                  </button>
                ) : (
                  <button
                    className="cta-invert"
                    onClick={() =>
                      handleConfirmUserForConnect(TYPESOFTABS.LINKEDIN)
                    }
                  >
                    Connect with Linkedin
                  </button>
                )
              ) : option === "twitter" ? (
                twitterAccessToken ? (
                  <button
                    className={`cta-invert disabled:opacity-50 disabled:cursor-not-allowed`}
                    onClick={() => {
                      if (
                        publishTweetText === "Publish on Twitter" ||
                        publishTweetText === "Published on Twitter"
                      )
                        handleConfirmUserForPublish(TYPESOFTABS.TWITTER);
                    }}
                    disabled={
                      meeData?.me?.remaining_twitter_quota == undefined ||
                      meeData?.me?.remaining_twitter_quota < 1 ||
                      meeData?.me?.remaining_twitter_quota == null ||
                      pauseTwitterPublish
                    }
                  >
                    {publishTweetLoad ? (
                      <ReactLoading
                        width={25}
                        height={25}
                        round={true}
                        color={"#2563EB"}
                      />
                    ) : (
                      publishTweetText
                    )}
                  </button>
                ) : (
                  <button
                    className={`cta-invert disabled:opacity-50 
                  disabled:cursor-not-allowed
                  `}
                    onClick={() =>
                      handleConfirmUserForConnect(TYPESOFTABS.TWITTER)
                    }
                  >
                    Connect Twitter
                  </button>
                )
              ) : (
                <button
                  className="flex cta-invert"
                  onClick={() => setOpenModal(true)}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    className="w-4 h-4 mr-2"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186l9.566-5.314m-9.566 7.5l9.566 5.314m0 0a2.25 2.25 0 103.935 2.186 2.25 2.25 0 00-3.935-2.186zm0-12.814a2.25 2.25 0 103.933-2.185 2.25 2.25 0 00-3.933 2.185z"
                    />
                  </svg>
                  Share
                </button>
              )}
            </div>
          )}
        </div>

        {showTwitterThreadUI === false ? (
          <>
            <Editor
              value={updatedText || editorText}
              apiKey="tw9wjbcvjph5zfvy33f62k35l2qtv5h8s2zhxdh4pta8kdet"
              init={{
                setup: (editor) => {
                  if (editor.inline) {
                    registerPageMouseUp(editor, throttledStore);
                  }
                },
                init_instance_callback: function (editor) {
                  editor.on("ExecCommand", function (e) {
                    //console.log("The " + e.command + " command was fired.");
                    if (e.command === "mceImage") {
                      setAlert(true);
                      //console.log("777");
                    }
                    if (isEditing) {
                      // setEditingMode(true);
                      isEditing = false;
                    }
                  });
                },
                skin: "naked",
                icons: "small",
                toolbar_location: "bottom",
                plugins: "lists code table codesample link",
                menubar: false,
                statusbar: false,
                height: "82vh",
                images_upload_base_path: `https://pluarisazurestorage.blob.core.windows.net/nowigence-web-resources/blogs`,
                images_upload_credentials: true,
                plugins:
                  "preview casechange importcss tinydrive searchreplace save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample table charmap pagebreak nonbreaking anchor tableofcontents insertdatetime advlist lists checklist wordcount  editimage help formatpainter permanentpen pageembed charmap emoticons advtable export mergetags",
                menu: {
                  tc: {
                    title: "Comments",
                    items: "addcomment showcomments deleteallconversations",
                  },
                },
                toolbar:
                  "undo redo image| bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | a11ycheck ltr rtl | showcomments addcomment | footnotes | mergetags",
                image_title: true,
                automatic_uploads: true,
                file_picker_types: "image",
                file_picker_callback: function (cb, value, meta) {
                  //console.log("852");
                  var input = document.createElement("input");
                  input.setAttribute("type", "file");
                  input.setAttribute("accept", "image/*");
                  var url = API_BASE_PATH + `/upload/image`;
                  var xhr = new XMLHttpRequest();
                  var fd = new FormData();
                  xhr.open("POST", url, true);

                  input.onchange = function () {
                    var file = this.files[0];
                    var reader = new FileReader();
                    xhr.onload = function () {
                      if (xhr.readyState === 4 && xhr.status === 200) {
                        // File uploaded successfully
                        var response = JSON.parse(xhr.responseText);

                        // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg
                        var url = response.url;
                        setImageURL(url);
                        setAlert(true);
                        //console.log("response.data", response.data);
                        //console.log("imageURL", imageURL);
                        //console.log("88", url);
                        //console.log("999", load);
                        setLoad(false);
                        // Create a thumbnail of the uploaded image, with 150px width
                        cb(url, { title: response.type });
                      }
                    };

                    reader.onload = function () {
                      setLoad(true);
                      var id = "blobid" + new Date().getTime();
                      var blobCache =
                        window.tinymce.activeEditor.editorUpload.blobCache;
                      var base64 = reader.result.split(",")[1];

                      var blobInfo = blobCache.create(id, file, base64);
                      blobCache.add(blobInfo);

                      // call the callback and populate the Title field with the file name

                      // fd.append("upload_preset", unsignedUploadPreset);
                      // fd.append("path", "browser_upload");
                      fd.append("file", blobInfo.blob());

                      xhr.send(fd);
                    };

                    reader.readAsDataURL(file);
                  };

                  input.click();
                },
                images_upload_handler: (blobInfo, success, failure) => {
                  /*var formdata = new FormData();
                    formdata.append("file", blobInfo.blob());
          
                    var requestOptions = {
                      method: "POST",
                      body: formdata,
                      redirect: "follow",
                    };
          
                    fetch("https://maverick.lille.ai/upload/image", requestOptions)
                      // .then((response) => response.text())
                      // .then((result) => {
                      //   const data = JSON.parse(result);
                      //   success(data.url);
                      // })
                      .catch((error) =>   //console.log("error", error));*/

                  //console.log("Harsh test this block");

                  const formdata = new FormData();
                  formdata.append("file", blobInfo.blob());

                  const config = {
                    method: "post",
                    url: API_BASE_PATH + "/upload/image",
                    data: formdata,
                  };
                  toast.success("Image Uploaded Successfully", {
                    position: toast.POSITION.TOP_CENTER,
                  });

                  axios(config)
                    .then((response) => { })
                    .catch((error) => console.log("error", error));
                },
                save_onsavecallback: function () { console.log('Saved'); }
              }}
              onEditorChange={(content, editor) => {
                setEditorText(content);
                setAutoSaveSavingStatus(SAVING_STATUS.SAVING)
                const newTimeout = resetTimeout(timeout, setTimeout(() => {
                  // saveValue
                  if (iRanNumberOfTimes > 3) {
                    saveValue()
                  }
                }, 400));
                setTimeoutId(newTimeout);
                setSaveText("Save Now!");
                setIRanNumberOfTimes((prevCount) => prevCount + 1);
                setIsEditorTextUpdated(true);
              }}
            />
          </>
        ) : (
          <div
            // overflowscroll verticalscroll
            style={{
              height: "82vh",
              overflowY: "scroll",
              overflowX: "hidden",
              padding: "0px 10px",
            }}
          >
            <Threads
              threadData={twitterThreadData}
              setthreadData={setTwitterThreadData}
              isUserPaid={meeData?.me?.paid}
              setPauseTwitterPublish={setPauseTwitterPublish}
              pauseTwitterPublish={pauseTwitterPublish}
              remainingTwitterQuota={meeData?.me?.remaining_twitter_quota}
              totalTwitterQuota={meeData?.me?.total_twitter_quota}
            />
          </div>
        )}
      </div>
      <div className="flex lg:hidden">
        {isAuthenticated && <BottomTabBar />}
      </div>
    </>
  );
}

function getImageSrc(text) {
  // Create a new DOMDocument object.
  const imageSrcRegex = /src="(.*?)"/;
  const match = imageSrcRegex.exec(text);
  if (match) {
    return match[1];
  } else {
    return null;
  }
}
